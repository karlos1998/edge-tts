name: Build and Deploy Python Edge TTS Application

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Build Docker image
        run: |
          docker build -t tts-edge-backend:${{ github.sha }} .

      - name: Save Docker image
        run: docker save tts-edge-backend:${{ github.sha }} | gzip > tts-edge-backend.tar.gz

      - name: Create tag file
        run: echo "${{ github.sha }}" > TAG

      - name: Deploy to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ vars.SERVER_HOST }}  # Użycie zmiennej z variables
          username: ${{ vars.SERVER_USER }}  # Użycie zmiennej z variables
          key: ${{ secrets.SERVER_SSH_KEY }}  # Sekret dla klucza SSH
          port: 22
          source: "tts-edge-backend.tar.gz,./docker-compose.prod.yml,TAG"
          target: "~/containers/tts-edge"

      - name: Start application
        uses: appleboy/ssh-action@master
        with:
          host: ${{ vars.SERVER_HOST }}
          username: ${{ vars.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: 22
          script: |
            cd ~/containers/tts-edge

            # Przygotowanie i czyszczenie środowiska
            export TAG=$(cat TAG)
            echo "Deploying version $TAG"

            # Zatrzymanie i usunięcie obecnie działających kontenerów
            docker-compose -f docker-compose.prod.yml down || true

            # Usunięcie starych obrazów
            docker image prune -a -f --filter "until=24h" || true
            docker rmi $(docker images -q tts-edge-backend | grep -v $TAG) || true

            # Załaduj nowy obraz i uruchom
            docker load < tts-edge-backend.tar.gz
            docker-compose -f docker-compose.prod.yml up -d
